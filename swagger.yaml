openapi: 3.0.0
info:
  title: Hotel Management
  description: Hotel Management Rest 
  version: 0.0.1
servers:
  - url: http://192.168.68.105:3000
    description: Optional server description, e.g. Main (production) server
  - url: http://staging-api.example.com
    description: Optional server description, e.g. Internal staging server for testing
paths:
  /rooms:
    get:
      tags:
        - Rooms
      summary: Returns a list of rooms
      description: Returns a list of rooms
      responses:
        '200':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                  data: 
                    type: array
                    items:
                      type: object
                      properties: 
                        room_number:
                          type: string
                        price:
                          type: number
                        locked:
                          type: string
                        max_persons:
                          type: integer
                        room_type:
                          type: string
        '204':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                  data: 
                    type: array
                    items:
                      type: object
                      properties: 
                        room_number:
                          type: string
                        price:
                          type: number
                        locked:
                          type: string
                        max_persons:
                          type: integer
                        room_type:
                          type: string
    post:
      tags:
        - Rooms
      summary: Create a room object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: "Bad Payload"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
    put:
      tags:
        - Rooms
      summary: Update a room object
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '201':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: "Bad Payload"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
  /rooms/:{room_number}:
    get:
      parameters:
        - in: path
          name: room_number
          schema:
            type: string
          required: true
          description: Room number
      tags:
        - Rooms
      summary: Returns room by a room number
      description: Returns room by a room number
      responses:
        '200':
          description: "A room object is returned"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                  data: 
                    type: array
                    items:
                      type: object
                      properties: 
                        room_number:
                          type: string
                        price:
                          type: number
                        locked:
                          type: string
                        max_persons:
                          type: integer
                        room_type:
                          type: string
        '204':
          description: "No rooms found"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  message: 
                    type: string
                  data: 
                    type: array
                    items:
                      type: object
                      properties: 
                        room_number:
                          type: string
                        price:
                          type: number
                        locked:
                          type: string
                        max_persons:
                          type: integer
                        room_type:
                          type: string
    delete:
      tags:
        - Rooms
      summary: Deletes a Room
      parameters:
        - in: path
          name: room_number
          schema:
            type: string
          required: true
          description: Room number

      responses:
        '200':
          description: Return a success status code
        '404':
          description: No Rooms found
  
  /customers:
    get:
      tags:
       - Customer
      summary: Customer end poing
      responses:
        '200':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Customer'
    post:
      tags:
       - Customer
      summary: Create Customer object
      requestBody:
        description: Customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Customer'
    put:
      tags:
       - Customer
      summary: Update Customer object
      requestBody:
        description: Customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Customer'
                
  /customers/:{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Customer id
      tags:
       - Customer
      summary: Get a single customer object
      responses:
        '200':
          description: "List of rooms are returned"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Customer'
    delete:
      tags:
        - Customer
      summary: Deletes a customer
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Customer id

      responses:
        '200':
          description: Return a success status code
        '404':
          description: No Rooms found
          
  /bookings:
    get:
      tags:
        - Bookings
      responses:
        '200':
          description: Returns all the bookings
        '204':
          description: No contents found
        '404':
          description: Resource not found
    post:
      tags:
        - Bookings
      summary: Create a booking
      requestBody:
        required: true
        description: Booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Created
        '400':
          description: Bad payload
          
    put:
      summary: Update a booking 
      tags:
        - Bookings
      requestBody:
        description: Booking
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Created
        '400':
          description: Bad payload
          
  /bookings/{id}:
    delete:
      tags:
        - Bookings
      summary: Deletes a booking
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Booking id

      responses:
        '200':
          description: Return a success status code
        '404':
          description: No Booking found
        '400':
          description: Bad API Param
    get:
      tags:
        - Bookings
      summary: Get a booking by it's id
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Booking id

      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: No Booking found
        '400':
          description: Bad API Param
  /bookings/{id}/payment:
    post:
      tags:
        - Bookings
      summary: Make a payment for a booking
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        description: Make a payment
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
      responses:
        '200':
          description: Return a success status code
        '404':
          description: No Booking found
        '400':
          description: Bad API Param
          
  /bookings/{id}/checkout:
    post:
      tags:
        - Bookings
      summary: Checkout From Hotel
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          
      responses:
        '200':
          description: Return a success status code
        '404':
          description: No Booking found
        '400':
          description: Bad API Param
  

        
          
  
                



components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    '201':
      description: Accepted
    '400':
      description: Payload not valid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Room:
      properties:
        id:
          type: number
        room_number:
          type: string
        price:
          type: number
        locked:
          type: string
        max_persons:
          type: integer
        room_type:
          type: string
    Customer:
      properties:
        id:
          type: number
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        email:
          type: string
          
    Booking:
      properties:
        id:
          type: number
        room_number:
          type: string
        customer_id:
          type: number
        arrival:
          type: string
        booking_type:
          type: string

security:
  - bearerAuth: []